const langsInternal: Record<string, string> = {
  adb: "adb",
  ads: "ads",
  ahk: "ahk",
  ahkl: "ahkl",
  htaccess: "htaccess",
  sh: "sh",
  ksh: "ksh",
  bash: "bash",
  ebuild: "ebuild",
  bat: "bat",
  cmd: "cmd",
  bf: "bf",
  b: "b",
  c: "c",
  h: "h",
  cfm: "cfm",
  cfml: "cfml",
  tmpl: "tmpl",
  spt: "spt",
  cl: "cl",
  lisp: "lisp",
  clj: "clj",
  cljs: "cljs",
  ontrol: "ontrol",
  cpp: "cpp",
  hpp: "hpp",
  cc: "cc",
  hh: "hh",
  cxx: "cxx",
  hxx: "hxx",
  pyx: "pyx",
  pxd: "pxd",
  d: "d",
  di: "di",
  diff: "diff",
  patch: "patch",
  dpatch: "dpatch",
  darcspatch: "darcspatch",
  duel: "duel",
  jbst: "jbst",
  dylan: "dylan",
  dyl: "dyl",
  erl: "erl",
  hrl: "hrl",
  flx: "flx",
  flxh: "flxh",
  f: "f",
  s: "s",
  vert: "vert",
  frag: "frag",
  plot: "plot",
  plt: "plt",
  man: "man",
  html: "html",
  htm: "htm",
  xhtml: "xhtml",
  xslt: "xslt",
  hy: "hy",
  hyb: "hyb",
  ini: "ini",
  cfg: "cfg",
  lua: "lua",
  wlua: "wlua",
  mak: "mak",
  akefile: "akefile",
  mhtml: "mhtml",
  mc: "mc",
  utohandler: "utohandler",
  handler: "handler",
  def: "def",
  mod: "mod",
  utodelegate: "utodelegate",
  asm: "asm",
  ml: "ml",
  mli: "mli",
  mll: "mll",
  mly: "mly",
  pl: "pl",
  pm: "pm",
  php: "php",
  ps: "ps",
  eps: "eps",
  pot: "pot",
  po: "po",
  pov: "pov",
  inc: "inc",
  prolog: "prolog",
  pro: "pro",
  py: "py",
  pyw: "pyw",
  sc: "sc",
  tac: "tac",
  rb: "rb",
  rbw: "rbw",
  gemspec: "gemspec",
  rbx: "rbx",
  duby: "duby",
  r: "r",
  rst: "rst",
  rest: "rest",
  tcsh: "tcsh",
  csh: "csh",
  tex: "tex",
  aux: "aux",
  v: "v",
  sv: "sv",
  vala: "vala",
  vapi: "vapi",
  vb: "vb",
  bas: "bas",
  vm: "vm",
  fhtml: "fhtml",
  vimrc: "vimrc",
  xml: "xml",
  xsl: "xsl",
  rss: "rss",
  xsd: "xsd",
  wsdl: "wsdl",
  xqy: "xqy",
  xquery: "xquery",
  yaml: "yaml",
  yml: "yml",
  js: "js",
  ts: "ts",
  tsx: "tsx",
  jsx: "jsx",
  typescript: "typescript",
  "": "js"
  
}

const handler: ProxyHandler<Record<string, string>> = {
  get: function(target, name: string) {
    return target[name] != undefined ? Reflect.get(target, name) : "js";
  }
};
export const langs = new Proxy(langsInternal, handler)